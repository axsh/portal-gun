// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	CreateVpnRequest
	DestroyVpnRequest
	CreateVpnReply
	DestroyVpnReply
	RegisterNicRequest
	DeregisterNicRequest
	RegisterNicReply
	DeregisterNicReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import model "github.com/axsh/vpnhub/model"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateVpnRequest struct {
	VpnServer *model.VpnServer `protobuf:"bytes,1,opt,name=vpn_server,json=vpnServer" json:"vpn_server,omitempty"`
}

func (m *CreateVpnRequest) Reset()                    { *m = CreateVpnRequest{} }
func (m *CreateVpnRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVpnRequest) ProtoMessage()               {}
func (*CreateVpnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateVpnRequest) GetVpnServer() *model.VpnServer {
	if m != nil {
		return m.VpnServer
	}
	return nil
}

type DestroyVpnRequest struct {
	VpnServer *model.VpnServer `protobuf:"bytes,1,opt,name=vpn_server,json=vpnServer" json:"vpn_server,omitempty"`
}

func (m *DestroyVpnRequest) Reset()                    { *m = DestroyVpnRequest{} }
func (m *DestroyVpnRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroyVpnRequest) ProtoMessage()               {}
func (*DestroyVpnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DestroyVpnRequest) GetVpnServer() *model.VpnServer {
	if m != nil {
		return m.VpnServer
	}
	return nil
}

type CreateVpnReply struct {
	VpnName string `protobuf:"bytes,1,opt,name=vpn_name,json=vpnName" json:"vpn_name,omitempty"`
}

func (m *CreateVpnReply) Reset()                    { *m = CreateVpnReply{} }
func (m *CreateVpnReply) String() string            { return proto.CompactTextString(m) }
func (*CreateVpnReply) ProtoMessage()               {}
func (*CreateVpnReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateVpnReply) GetVpnName() string {
	if m != nil {
		return m.VpnName
	}
	return ""
}

type DestroyVpnReply struct {
	VpnName string `protobuf:"bytes,1,opt,name=vpn_name,json=vpnName" json:"vpn_name,omitempty"`
}

func (m *DestroyVpnReply) Reset()                    { *m = DestroyVpnReply{} }
func (m *DestroyVpnReply) String() string            { return proto.CompactTextString(m) }
func (*DestroyVpnReply) ProtoMessage()               {}
func (*DestroyVpnReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DestroyVpnReply) GetVpnName() string {
	if m != nil {
		return m.VpnName
	}
	return ""
}

type RegisterNicRequest struct {
	Nic *model.Nic `protobuf:"bytes,1,opt,name=nic" json:"nic,omitempty"`
}

func (m *RegisterNicRequest) Reset()                    { *m = RegisterNicRequest{} }
func (m *RegisterNicRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNicRequest) ProtoMessage()               {}
func (*RegisterNicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisterNicRequest) GetNic() *model.Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

type DeregisterNicRequest struct {
	Nic *model.Nic `protobuf:"bytes,1,opt,name=nic" json:"nic,omitempty"`
}

func (m *DeregisterNicRequest) Reset()                    { *m = DeregisterNicRequest{} }
func (m *DeregisterNicRequest) String() string            { return proto.CompactTextString(m) }
func (*DeregisterNicRequest) ProtoMessage()               {}
func (*DeregisterNicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeregisterNicRequest) GetNic() *model.Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

type RegisterNicReply struct {
	InterfaceId string `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
}

func (m *RegisterNicReply) Reset()                    { *m = RegisterNicReply{} }
func (m *RegisterNicReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterNicReply) ProtoMessage()               {}
func (*RegisterNicReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RegisterNicReply) GetInterfaceId() string {
	if m != nil {
		return m.InterfaceId
	}
	return ""
}

type DeregisterNicReply struct {
	InterfaceId string `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
}

func (m *DeregisterNicReply) Reset()                    { *m = DeregisterNicReply{} }
func (m *DeregisterNicReply) String() string            { return proto.CompactTextString(m) }
func (*DeregisterNicReply) ProtoMessage()               {}
func (*DeregisterNicReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeregisterNicReply) GetInterfaceId() string {
	if m != nil {
		return m.InterfaceId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateVpnRequest)(nil), "api.CreateVpnRequest")
	proto.RegisterType((*DestroyVpnRequest)(nil), "api.DestroyVpnRequest")
	proto.RegisterType((*CreateVpnReply)(nil), "api.CreateVpnReply")
	proto.RegisterType((*DestroyVpnReply)(nil), "api.DestroyVpnReply")
	proto.RegisterType((*RegisterNicRequest)(nil), "api.RegisterNicRequest")
	proto.RegisterType((*DeregisterNicRequest)(nil), "api.DeregisterNicRequest")
	proto.RegisterType((*RegisterNicReply)(nil), "api.RegisterNicReply")
	proto.RegisterType((*DeregisterNicReply)(nil), "api.DeregisterNicReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VpnService service

type VpnServiceClient interface {
	Create(ctx context.Context, in *CreateVpnRequest, opts ...grpc.CallOption) (*CreateVpnReply, error)
	Destroy(ctx context.Context, in *DestroyVpnRequest, opts ...grpc.CallOption) (*DestroyVpnReply, error)
}

type vpnServiceClient struct {
	cc *grpc.ClientConn
}

func NewVpnServiceClient(cc *grpc.ClientConn) VpnServiceClient {
	return &vpnServiceClient{cc}
}

func (c *vpnServiceClient) Create(ctx context.Context, in *CreateVpnRequest, opts ...grpc.CallOption) (*CreateVpnReply, error) {
	out := new(CreateVpnReply)
	err := grpc.Invoke(ctx, "/api.VpnService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) Destroy(ctx context.Context, in *DestroyVpnRequest, opts ...grpc.CallOption) (*DestroyVpnReply, error) {
	out := new(DestroyVpnReply)
	err := grpc.Invoke(ctx, "/api.VpnService/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VpnService service

type VpnServiceServer interface {
	Create(context.Context, *CreateVpnRequest) (*CreateVpnReply, error)
	Destroy(context.Context, *DestroyVpnRequest) (*DestroyVpnReply, error)
}

func RegisterVpnServiceServer(s *grpc.Server, srv VpnServiceServer) {
	s.RegisterService(&_VpnService_serviceDesc, srv)
}

func _VpnService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VpnService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).Create(ctx, req.(*CreateVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VpnService/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).Destroy(ctx, req.(*DestroyVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VpnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.VpnService",
	HandlerType: (*VpnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VpnService_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _VpnService_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

// Client API for NicService service

type NicServiceClient interface {
	Register(ctx context.Context, in *RegisterNicRequest, opts ...grpc.CallOption) (*RegisterNicReply, error)
	Deregister(ctx context.Context, in *DeregisterNicRequest, opts ...grpc.CallOption) (*DeregisterNicReply, error)
}

type nicServiceClient struct {
	cc *grpc.ClientConn
}

func NewNicServiceClient(cc *grpc.ClientConn) NicServiceClient {
	return &nicServiceClient{cc}
}

func (c *nicServiceClient) Register(ctx context.Context, in *RegisterNicRequest, opts ...grpc.CallOption) (*RegisterNicReply, error) {
	out := new(RegisterNicReply)
	err := grpc.Invoke(ctx, "/api.NicService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nicServiceClient) Deregister(ctx context.Context, in *DeregisterNicRequest, opts ...grpc.CallOption) (*DeregisterNicReply, error) {
	out := new(DeregisterNicReply)
	err := grpc.Invoke(ctx, "/api.NicService/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NicService service

type NicServiceServer interface {
	Register(context.Context, *RegisterNicRequest) (*RegisterNicReply, error)
	Deregister(context.Context, *DeregisterNicRequest) (*DeregisterNicReply, error)
}

func RegisterNicServiceServer(s *grpc.Server, srv NicServiceServer) {
	s.RegisterService(&_NicService_serviceDesc, srv)
}

func _NicService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NicService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicServiceServer).Register(ctx, req.(*RegisterNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NicService_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicServiceServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NicService/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicServiceServer).Deregister(ctx, req.(*DeregisterNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.NicService",
	HandlerType: (*NicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NicService_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _NicService_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x25, 0x24, 0xfc, 0x19, 0x88, 0xe2, 0x0a, 0x22, 0x0d, 0x07, 0xed, 0xc9, 0x44, 0xd3,
	0x26, 0xf5, 0x5f, 0x4c, 0x3c, 0x01, 0x17, 0x2f, 0x1c, 0x6a, 0xc2, 0xc1, 0x0b, 0x59, 0xca, 0x08,
	0x9b, 0xd0, 0xed, 0xba, 0x5d, 0x1a, 0x39, 0xf9, 0x0d, 0xfc, 0xcc, 0xa6, 0xdb, 0x56, 0xb1, 0x35,
	0x51, 0xe3, 0xad, 0x79, 0x33, 0x6f, 0xe6, 0xd7, 0x37, 0x0b, 0xcd, 0x10, 0x65, 0x84, 0xd2, 0x12,
	0x32, 0x50, 0x01, 0x29, 0x53, 0xc1, 0x8c, 0x86, 0x1f, 0xcc, 0x71, 0x95, 0x28, 0xe6, 0x10, 0x5a,
	0x43, 0x89, 0x54, 0xe1, 0x44, 0x70, 0x17, 0x9f, 0xd7, 0x18, 0x2a, 0x62, 0x03, 0x44, 0x82, 0x4f,
	0x13, 0xe7, 0x51, 0xe9, 0xb8, 0x74, 0xda, 0x70, 0x5a, 0x56, 0xe2, 0x9a, 0x08, 0xfe, 0xa0, 0x75,
	0xb7, 0x1e, 0x65, 0x9f, 0xe6, 0x08, 0xf6, 0x47, 0x18, 0x2a, 0x19, 0x6c, 0xfe, 0x33, 0xe5, 0x0c,
	0x76, 0xb7, 0x50, 0xc4, 0x6a, 0x43, 0x7a, 0x50, 0x8b, 0x47, 0x70, 0xea, 0xa3, 0x1e, 0x50, 0x77,
	0xab, 0x91, 0xe0, 0x63, 0xea, 0xa3, 0x79, 0x0e, 0x7b, 0xdb, 0x2b, 0x7f, 0xe8, 0x76, 0x80, 0xb8,
	0xb8, 0x60, 0xa1, 0x42, 0x39, 0x66, 0x5e, 0x46, 0xd8, 0x87, 0x32, 0x67, 0x5e, 0x8a, 0x06, 0x29,
	0x5a, 0x5c, 0x8f, 0x65, 0xf3, 0x12, 0xda, 0x23, 0x94, 0x7f, 0x75, 0x5d, 0x41, 0xeb, 0xcb, 0xa6,
	0x18, 0xec, 0x04, 0x9a, 0x8c, 0x2b, 0x94, 0x4f, 0xd4, 0xc3, 0x29, 0x9b, 0xa7, 0x70, 0x8d, 0x0f,
	0xed, 0x7e, 0x6e, 0xde, 0x00, 0xc9, 0x2d, 0xfb, 0x9d, 0xd1, 0x79, 0x05, 0x48, 0xc3, 0x64, 0x1e,
	0x92, 0x6b, 0xa8, 0x24, 0x11, 0x92, 0x8e, 0x45, 0x05, 0xb3, 0xf2, 0xa7, 0x35, 0x0e, 0xf2, 0xb2,
	0x58, 0x6d, 0xcc, 0x1d, 0x72, 0x0b, 0xd5, 0x34, 0x4d, 0x72, 0xa8, 0x3b, 0x0a, 0xe7, 0x34, 0xda,
	0x05, 0x5d, 0x5b, 0x9d, 0xb7, 0x12, 0xc0, 0x98, 0x79, 0x19, 0xc1, 0x1d, 0xd4, 0xb2, 0xff, 0x27,
	0x5d, 0x6d, 0x29, 0x06, 0x6f, 0x74, 0x8a, 0x85, 0x84, 0x63, 0x00, 0xf0, 0x19, 0x03, 0xe9, 0xa5,
	0x2b, 0x8b, 0x47, 0x30, 0xba, 0xdf, 0x95, 0xf4, 0x8c, 0x41, 0xff, 0xd1, 0x58, 0x30, 0xb5, 0x5c,
	0xcf, 0x2c, 0x2f, 0xf0, 0x6d, 0xfa, 0x12, 0x2e, 0xed, 0x48, 0xf0, 0xe5, 0x7a, 0x66, 0x53, 0xc1,
	0x66, 0x15, 0xfd, 0xec, 0x2f, 0xde, 0x03, 0x00, 0x00, 0xff, 0xff, 0x51, 0x8c, 0xfe, 0x5d, 0x18,
	0x03, 0x00, 0x00,
}
