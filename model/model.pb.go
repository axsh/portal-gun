// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	VpnServer
	SoftEtherParam
	Nic
	OpenVNetInterface
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VpnServer_Type int32

const (
	VpnServer_NONE          VpnServer_Type = 0
	VpnServer_SOFTETHER_VPN VpnServer_Type = 1
)

var VpnServer_Type_name = map[int32]string{
	0: "NONE",
	1: "SOFTETHER_VPN",
}
var VpnServer_Type_value = map[string]int32{
	"NONE":          0,
	"SOFTETHER_VPN": 1,
}

func (x VpnServer_Type) String() string {
	return proto.EnumName(VpnServer_Type_name, int32(x))
}
func (VpnServer_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Nic_Type int32

const (
	Nic_NONE     Nic_Type = 0
	Nic_OPENVNET Nic_Type = 1
)

var Nic_Type_name = map[int32]string{
	0: "NONE",
	1: "OPENVNET",
}
var Nic_Type_value = map[string]int32{
	"NONE":     0,
	"OPENVNET": 1,
}

func (x Nic_Type) String() string {
	return proto.EnumName(Nic_Type_name, int32(x))
}
func (Nic_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// vpn manager messgage
type VpnServer struct {
	DriverType VpnServer_Type `protobuf:"varint,1,opt,name=driver_type,json=driverType,enum=model.VpnServer_Type" json:"driver_type,omitempty"`
	// Types that are valid to be assigned to Param:
	//	*VpnServer_Softehter
	Param isVpnServer_Param `protobuf_oneof:"Param"`
}

func (m *VpnServer) Reset()                    { *m = VpnServer{} }
func (m *VpnServer) String() string            { return proto.CompactTextString(m) }
func (*VpnServer) ProtoMessage()               {}
func (*VpnServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isVpnServer_Param interface {
	isVpnServer_Param()
}

type VpnServer_Softehter struct {
	Softehter *SoftEtherParam `protobuf:"bytes,100,opt,name=softehter,oneof"`
}

func (*VpnServer_Softehter) isVpnServer_Param() {}

func (m *VpnServer) GetParam() isVpnServer_Param {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *VpnServer) GetDriverType() VpnServer_Type {
	if m != nil {
		return m.DriverType
	}
	return VpnServer_NONE
}

func (m *VpnServer) GetSoftehter() *SoftEtherParam {
	if x, ok := m.GetParam().(*VpnServer_Softehter); ok {
		return x.Softehter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VpnServer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VpnServer_OneofMarshaler, _VpnServer_OneofUnmarshaler, _VpnServer_OneofSizer, []interface{}{
		(*VpnServer_Softehter)(nil),
	}
}

func _VpnServer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VpnServer)
	// Param
	switch x := m.Param.(type) {
	case *VpnServer_Softehter:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Softehter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VpnServer.Param has unexpected type %T", x)
	}
	return nil
}

func _VpnServer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VpnServer)
	switch tag {
	case 100: // Param.softehter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoftEtherParam)
		err := b.DecodeMessage(msg)
		m.Param = &VpnServer_Softehter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VpnServer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VpnServer)
	// Param
	switch x := m.Param.(type) {
	case *VpnServer_Softehter:
		s := proto.Size(x.Softehter)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SoftEtherParam struct {
	VirtualHub       string `protobuf:"bytes,1,opt,name=virtual_hub,json=virtualHub" json:"virtual_hub,omitempty"`
	Ipv4Network      string `protobuf:"bytes,2,opt,name=ipv4_network,json=ipv4Network" json:"ipv4_network,omitempty"`
	Ipv4BeginAddress uint32 `protobuf:"varint,3,opt,name=ipv4_begin_address,json=ipv4BeginAddress" json:"ipv4_begin_address,omitempty"`
	Ipv4EndAddress   uint32 `protobuf:"varint,4,opt,name=ipv4_end_address,json=ipv4EndAddress" json:"ipv4_end_address,omitempty"`
	TapId            string `protobuf:"bytes,5,opt,name=tap_id,json=tapId" json:"tap_id,omitempty"`
}

func (m *SoftEtherParam) Reset()                    { *m = SoftEtherParam{} }
func (m *SoftEtherParam) String() string            { return proto.CompactTextString(m) }
func (*SoftEtherParam) ProtoMessage()               {}
func (*SoftEtherParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SoftEtherParam) GetVirtualHub() string {
	if m != nil {
		return m.VirtualHub
	}
	return ""
}

func (m *SoftEtherParam) GetIpv4Network() string {
	if m != nil {
		return m.Ipv4Network
	}
	return ""
}

func (m *SoftEtherParam) GetIpv4BeginAddress() uint32 {
	if m != nil {
		return m.Ipv4BeginAddress
	}
	return 0
}

func (m *SoftEtherParam) GetIpv4EndAddress() uint32 {
	if m != nil {
		return m.Ipv4EndAddress
	}
	return 0
}

func (m *SoftEtherParam) GetTapId() string {
	if m != nil {
		return m.TapId
	}
	return ""
}

type Nic struct {
	DriverType Nic_Type `protobuf:"varint,1,opt,name=driver_type,json=driverType,enum=model.Nic_Type" json:"driver_type,omitempty"`
	// Types that are valid to be assigned to InterfaceParams:
	//	*Nic_OpenvnetInterface
	InterfaceParams isNic_InterfaceParams `protobuf_oneof:"InterfaceParams"`
}

func (m *Nic) Reset()                    { *m = Nic{} }
func (m *Nic) String() string            { return proto.CompactTextString(m) }
func (*Nic) ProtoMessage()               {}
func (*Nic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isNic_InterfaceParams interface {
	isNic_InterfaceParams()
}

type Nic_OpenvnetInterface struct {
	OpenvnetInterface *OpenVNetInterface `protobuf:"bytes,100,opt,name=openvnet_interface,json=openvnetInterface,oneof"`
}

func (*Nic_OpenvnetInterface) isNic_InterfaceParams() {}

func (m *Nic) GetInterfaceParams() isNic_InterfaceParams {
	if m != nil {
		return m.InterfaceParams
	}
	return nil
}

func (m *Nic) GetDriverType() Nic_Type {
	if m != nil {
		return m.DriverType
	}
	return Nic_NONE
}

func (m *Nic) GetOpenvnetInterface() *OpenVNetInterface {
	if x, ok := m.GetInterfaceParams().(*Nic_OpenvnetInterface); ok {
		return x.OpenvnetInterface
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Nic) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Nic_OneofMarshaler, _Nic_OneofUnmarshaler, _Nic_OneofSizer, []interface{}{
		(*Nic_OpenvnetInterface)(nil),
	}
}

func _Nic_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Nic)
	// InterfaceParams
	switch x := m.InterfaceParams.(type) {
	case *Nic_OpenvnetInterface:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenvnetInterface); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Nic.InterfaceParams has unexpected type %T", x)
	}
	return nil
}

func _Nic_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Nic)
	switch tag {
	case 100: // InterfaceParams.openvnet_interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpenVNetInterface)
		err := b.DecodeMessage(msg)
		m.InterfaceParams = &Nic_OpenvnetInterface{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Nic_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Nic)
	// InterfaceParams
	switch x := m.InterfaceParams.(type) {
	case *Nic_OpenvnetInterface:
		s := proto.Size(x.OpenvnetInterface)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// network manage message
type OpenVNetInterface struct {
	InterfaceId string                      `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	NetworkId   string                      `protobuf:"bytes,2,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
	Iplease     *OpenVNetInterface_IpLease  `protobuf:"bytes,4,opt,name=iplease" json:"iplease,omitempty"`
	MacLease    *OpenVNetInterface_MacLease `protobuf:"bytes,5,opt,name=mac_lease,json=macLease" json:"mac_lease,omitempty"`
}

func (m *OpenVNetInterface) Reset()                    { *m = OpenVNetInterface{} }
func (m *OpenVNetInterface) String() string            { return proto.CompactTextString(m) }
func (*OpenVNetInterface) ProtoMessage()               {}
func (*OpenVNetInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OpenVNetInterface) GetInterfaceId() string {
	if m != nil {
		return m.InterfaceId
	}
	return ""
}

func (m *OpenVNetInterface) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *OpenVNetInterface) GetIplease() *OpenVNetInterface_IpLease {
	if m != nil {
		return m.Iplease
	}
	return nil
}

func (m *OpenVNetInterface) GetMacLease() *OpenVNetInterface_MacLease {
	if m != nil {
		return m.MacLease
	}
	return nil
}

type OpenVNetInterface_IpLease struct {
	Ipv4Address string `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	MacLeaseId  string `protobuf:"bytes,2,opt,name=mac_lease_id,json=macLeaseId" json:"mac_lease_id,omitempty"`
	NetworkId   string `protobuf:"bytes,3,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
}

func (m *OpenVNetInterface_IpLease) Reset()                    { *m = OpenVNetInterface_IpLease{} }
func (m *OpenVNetInterface_IpLease) String() string            { return proto.CompactTextString(m) }
func (*OpenVNetInterface_IpLease) ProtoMessage()               {}
func (*OpenVNetInterface_IpLease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *OpenVNetInterface_IpLease) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *OpenVNetInterface_IpLease) GetMacLeaseId() string {
	if m != nil {
		return m.MacLeaseId
	}
	return ""
}

func (m *OpenVNetInterface_IpLease) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

type OpenVNetInterface_MacLease struct {
	InterfaceId string `protobuf:"bytes,1,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	MacAddr     string `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr" json:"mac_addr,omitempty"`
}

func (m *OpenVNetInterface_MacLease) Reset()                    { *m = OpenVNetInterface_MacLease{} }
func (m *OpenVNetInterface_MacLease) String() string            { return proto.CompactTextString(m) }
func (*OpenVNetInterface_MacLease) ProtoMessage()               {}
func (*OpenVNetInterface_MacLease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *OpenVNetInterface_MacLease) GetInterfaceId() string {
	if m != nil {
		return m.InterfaceId
	}
	return ""
}

func (m *OpenVNetInterface_MacLease) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*VpnServer)(nil), "model.VpnServer")
	proto.RegisterType((*SoftEtherParam)(nil), "model.SoftEtherParam")
	proto.RegisterType((*Nic)(nil), "model.Nic")
	proto.RegisterType((*OpenVNetInterface)(nil), "model.OpenVNetInterface")
	proto.RegisterType((*OpenVNetInterface_IpLease)(nil), "model.OpenVNetInterface.IpLease")
	proto.RegisterType((*OpenVNetInterface_MacLease)(nil), "model.OpenVNetInterface.MacLease")
	proto.RegisterEnum("model.VpnServer_Type", VpnServer_Type_name, VpnServer_Type_value)
	proto.RegisterEnum("model.Nic_Type", Nic_Type_name, Nic_Type_value)
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x8e, 0xda, 0x3c,
	0x14, 0xc5, 0x1f, 0x30, 0xc0, 0x0d, 0xc3, 0x80, 0xa5, 0x91, 0xf2, 0x8d, 0xda, 0x29, 0x93, 0x6e,
	0x58, 0x54, 0x50, 0x4d, 0x7f, 0x16, 0x5d, 0x54, 0x2a, 0x52, 0x2a, 0x22, 0xb5, 0x01, 0x05, 0xc4,
	0xa2, 0x9b, 0xc8, 0x89, 0xcd, 0x24, 0x2a, 0x49, 0x2c, 0xc7, 0xa4, 0x9d, 0x57, 0xe8, 0x93, 0xf4,
	0x05, 0xfa, 0x04, 0x7d, 0xb1, 0x2a, 0xce, 0x0f, 0x6a, 0xe9, 0x48, 0xdd, 0xc5, 0xc7, 0xe7, 0xdc,
	0x7b, 0xcf, 0xb9, 0x0e, 0x68, 0x51, 0x42, 0xd9, 0x7e, 0xca, 0x45, 0x22, 0x13, 0xdc, 0x56, 0x07,
	0xe3, 0x3b, 0x82, 0xde, 0x96, 0xc7, 0x6b, 0x26, 0x32, 0x26, 0xf0, 0x6b, 0xd0, 0xa8, 0x08, 0x33,
	0x26, 0x5c, 0x79, 0xcf, 0x99, 0x8e, 0xc6, 0x68, 0x32, 0xb8, 0xbd, 0x9c, 0x16, 0xba, 0x9a, 0x36,
	0xdd, 0xdc, 0x73, 0xe6, 0x40, 0xc1, 0xcc, 0xbf, 0xf1, 0x2b, 0xe8, 0xa5, 0xc9, 0x4e, 0xb2, 0x40,
	0x32, 0xa1, 0xd3, 0x31, 0x9a, 0x68, 0xb5, 0x6a, 0x9d, 0xec, 0xa4, 0x29, 0x03, 0x26, 0x56, 0x44,
	0x90, 0x68, 0xd1, 0x70, 0x8e, 0x4c, 0xe3, 0x29, 0xb4, 0x94, 0xbc, 0x0b, 0x2d, 0x7b, 0x69, 0x9b,
	0xc3, 0x06, 0x1e, 0xc1, 0xf9, 0x7a, 0xf9, 0x7e, 0x63, 0x6e, 0x16, 0xa6, 0xe3, 0x6e, 0x57, 0xf6,
	0x10, 0xcd, 0x3b, 0xd0, 0x56, 0x52, 0xe3, 0x27, 0x82, 0xc1, 0xef, 0xd5, 0xf0, 0x13, 0xd0, 0xb2,
	0x50, 0xc8, 0x03, 0xd9, 0xbb, 0xc1, 0xc1, 0x53, 0xf3, 0xf6, 0x1c, 0x28, 0xa1, 0xc5, 0xc1, 0xc3,
	0x37, 0xd0, 0x0f, 0x79, 0xf6, 0xd2, 0x8d, 0x99, 0xfc, 0x92, 0x88, 0xcf, 0xfa, 0x7f, 0x8a, 0xa1,
	0xe5, 0x98, 0x5d, 0x40, 0xf8, 0x19, 0x60, 0x45, 0xf1, 0xd8, 0x5d, 0x18, 0xbb, 0x84, 0x52, 0xc1,
	0xd2, 0x54, 0x6f, 0x8e, 0xd1, 0xe4, 0xdc, 0x19, 0xe6, 0x37, 0xf3, 0xfc, 0xe2, 0x5d, 0x81, 0xe3,
	0x09, 0x28, 0xcc, 0x65, 0x31, 0xad, 0xb9, 0x2d, 0xc5, 0x1d, 0xe4, 0xb8, 0x19, 0xd3, 0x8a, 0x79,
	0x09, 0x67, 0x92, 0x70, 0x37, 0xa4, 0x7a, 0x5b, 0x35, 0x6d, 0x4b, 0xc2, 0x2d, 0x6a, 0xfc, 0x40,
	0xd0, 0xb4, 0x43, 0x1f, 0x3f, 0xff, 0x5b, 0xd4, 0x17, 0x65, 0x68, 0x76, 0xe8, 0x9f, 0x86, 0x6c,
	0x01, 0x4e, 0x38, 0x8b, 0xb3, 0x98, 0x49, 0x37, 0x8c, 0x25, 0x13, 0x3b, 0xe2, 0xb3, 0x32, 0x6d,
	0xbd, 0x14, 0x2e, 0x39, 0x8b, 0xb7, 0x36, 0x93, 0x56, 0x75, 0xbf, 0x68, 0x38, 0xa3, 0x4a, 0x55,
	0x83, 0xc6, 0xf5, 0x49, 0xf0, 0x7d, 0xe8, 0x2e, 0x57, 0xa6, 0xbd, 0xb5, 0xcd, 0xcd, 0x10, 0xcd,
	0x47, 0x70, 0x51, 0x93, 0x55, 0xd2, 0xa9, 0xf1, 0xad, 0x09, 0xa3, 0x93, 0xea, 0x2a, 0xdf, 0xea,
	0x90, 0x5b, 0x45, 0x65, 0xbe, 0x15, 0x66, 0x51, 0xfc, 0x18, 0xa0, 0x4c, 0x3f, 0x27, 0x14, 0x0b,
	0xe8, 0x95, 0x88, 0x45, 0xf1, 0x1b, 0xe8, 0x84, 0x7c, 0xcf, 0x48, 0xca, 0x54, 0x8e, 0xda, 0xed,
	0xf8, 0x21, 0x2b, 0x53, 0x8b, 0x7f, 0xc8, 0x79, 0x4e, 0x25, 0xc0, 0x6f, 0xa1, 0x17, 0x11, 0xdf,
	0x2d, 0xd4, 0x6d, 0xa5, 0xbe, 0x79, 0x50, 0xfd, 0x91, 0xf8, 0x85, 0xbc, 0x1b, 0x95, 0x5f, 0x57,
	0x11, 0x74, 0xca, 0x9a, 0xf5, 0x43, 0xa9, 0x76, 0x8a, 0x8e, 0x0f, 0xa5, 0x5a, 0xe8, 0x18, 0xfa,
	0x75, 0xb7, 0xa3, 0x15, 0xa8, 0xaa, 0x9d, 0x58, 0x6d, 0xfe, 0x61, 0xf5, 0x6a, 0x01, 0xdd, 0x6a,
	0x88, 0x7f, 0x09, 0xee, 0x7f, 0xc8, 0x27, 0x55, 0x13, 0x95, 0xbd, 0x3a, 0x11, 0xf1, 0xf3, 0x69,
	0xe6, 0xd7, 0x9f, 0x1e, 0xdd, 0x85, 0x32, 0x38, 0x78, 0x53, 0x3f, 0x89, 0x66, 0xe4, 0x6b, 0x1a,
	0xcc, 0x32, 0x1e, 0x07, 0x07, 0x6f, 0xa6, 0xdc, 0x7b, 0x67, 0xea, 0x1f, 0x7f, 0xf1, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x6e, 0x48, 0xdf, 0x44, 0xf2, 0x03, 0x00, 0x00,
}
